// Generated by CoffeeScript 1.4.0
(function() {
  var Hopalong, Scene, scene,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Hopalong = (function() {

    function Hopalong() {
      var _ref, _ref1, _ref2, _ref3, _ref4;
      _ref = [-30, 30], this.A_MIN = _ref[0], this.A_MAX = _ref[1];
      _ref1 = [.2, 1.8], this.B_MIN = _ref1[0], this.B_MAX = _ref1[1];
      _ref2 = [5, 17], this.C_MIN = _ref2[0], this.C_MAX = _ref2[1];
      _ref3 = [0, 10], this.D_MIN = _ref3[0], this.D_MAX = _ref3[1];
      _ref4 = [0, 12], this.E_MIN = _ref4[0], this.E_MAX = _ref4[1];
    }

    Hopalong.prototype.randomStartPoint = function(subsetId) {
      return subsetId * .015 * (0.5 - Math.random());
    };

    Hopalong.prototype.createOrbit = function(scaleFactor, subsetsNum, particlesNum) {
      var a, b, c, d, e, orbit, particle, praticle, scaleX, scaleY, subset, subsetId, x, xMax, xMin, y, yMax, yMin, _i, _len, _ref, _ref1, _results;
      a = this.A_MIN + Math.random() * (this.A_MAX - this.A_MIN);
      b = this.B_MIN + Math.random() * (this.B_MAX - this.B_MIN);
      c = this.C_MIN + Math.random() * (this.C_MAX - this.C_MIN);
      d = this.D_MIN + Math.random() * (this.D_MAX - this.D_MIN);
      e = this.E_MIN + Math.random() * (this.E_MAX - this.E_MIN);
      _ref = [0, 0], xMin = _ref[0], xMax = _ref[1];
      _ref1 = [0, 0], yMin = _ref1[0], yMax = _ref1[1];
      orbit = (function() {
        var _i, _ref2, _results;
        _results = [];
        for (subsetId = _i = 0; _i < subsetsNum; subsetId = _i += 1) {
          _ref2 = [this.randomStartPoint(subsetId), this.randomStartPoint(subsetId)], x = _ref2[0], y = _ref2[1];
          _results.push((function() {
            var _j, _ref3, _ref4, _results1;
            _results1 = [];
            for (praticle = _j = 0; _j < particlesNum; praticle = _j += 1) {
              _ref4 = [
                y - (((_ref3 = x > 0) != null ? _ref3 : {
                  1: -1
                }) * (d + Math.sqrt(Math.abs(b * x - c)))) + e, a - x
              ], x = _ref4[0], y = _ref4[1];
              if (x < xMin) {
                xMin = x;
              } else if (x > xMax) {
                xMax = x;
              }
              if (y < yMin) {
                yMin = y;
              } else if (y > yMax) {
                yMax = y;
              }
              _results1.push(new THREE.Vector3(x, y, 0));
            }
            return _results1;
          })());
        }
        return _results;
      }).call(this);
      scaleX = 2 * scaleFactor / (xMax - xMin);
      scaleY = 2 * scaleFactor / (yMax - yMin);
      _results = [];
      for (_i = 0, _len = orbit.length; _i < _len; _i++) {
        subset = orbit[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = subset.length; _j < _len1; _j++) {
            particle = subset[_j];
            _results1.push(new THREE.Vector3(scaleX * (particle.x - xMin) - scaleFactor, scaleY * (particle.y - yMin) - scaleFactor, 0));
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Hopalong;

  })();

  Scene = (function() {

    function Scene(scaleFactor) {
      var container, hopalong, orbit;
      this.scaleFactor = scaleFactor;
      this.animate = __bind(this.animate, this);

      container = document.createElement('div');
      document.body.appendChild(container);
      if (!Detector.webgl) {
        Detector.addGetWebGLMessage();
      }
      this.camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 3 * this.scaleFactor);
      this.camera.position.z = this.scaleFactor / 2;
      this.scene = new THREE.Scene();
      this.scene.fog = new THREE.FogExp2(0x000000, 0.0011);
      this.scene.add(this.camera);
      this.renderer = new THREE.WebGLRenderer({
        clearColor: 0x000000,
        clearAlpha: 1,
        antialias: false
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.stats = new Stats();
      this.stats.domElement.style.position = 'absolute';
      this.stats.domElement.style.top = '5px';
      this.stats.domElement.style.left = '5px';
      container.appendChild(this.renderer.domElement);
      container.appendChild(this.stats.domElement);
      hopalong = new Hopalong();
      orbit = hopalong.createOrbit(1000, 20, 10000);
      this.setUpScene(orbit);
    }

    Scene.prototype.animate = function() {
      requestAnimationFrame(this.animate);
      this.renderer.render(this.scene, this.camera);
      return this.stats.update();
    };

    Scene.prototype.setUpScene = function(orbit) {
      var geometry, i, material, particles, sprite, subset, _i, _len, _results;
      this.camera.lookAt(this.scene.position);
      sprite = THREE.ImageUtils.loadTexture("img/galaxy.png");
      _results = [];
      for (i = _i = 0, _len = orbit.length; _i < _len; i = ++_i) {
        subset = orbit[i];
        geometry = new THREE.Geometry();
        geometry.vertices = subset;
        material = new THREE.ParticleBasicMaterial({
          size: 10,
          map: sprite,
          blending: THREE.AdditiveBlending,
          depthTest: false,
          transparent: true
        });
        material.color.setHSV(Math.random(), 0.7, 1);
        particles = new THREE.ParticleSystem(geometry, material);
        particles.position.x = 0;
        particles.position.y = 0;
        particles.position.z = -200 * i;
        particles.needsUpdate = 0;
        _results.push(this.scene.add(particles));
      }
      return _results;
    };

    return Scene;

  })();

  scene = new Scene(1000);

  scene.animate();

}).call(this);
